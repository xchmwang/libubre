// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_state_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_state_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_state_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_state_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_state_2eproto;
namespace consensuspb {
class ConsensusRoot;
class ConsensusRootDefaultTypeInternal;
extern ConsensusRootDefaultTypeInternal _ConsensusRoot_default_instance_;
}  // namespace consensuspb
PROTOBUF_NAMESPACE_OPEN
template<> ::consensuspb::ConsensusRoot* Arena::CreateMaybeMessage<::consensuspb::ConsensusRoot>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace consensuspb {

// ===================================================================

class ConsensusRoot :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:consensuspb.ConsensusRoot) */ {
 public:
  ConsensusRoot();
  virtual ~ConsensusRoot();

  ConsensusRoot(const ConsensusRoot& from);
  ConsensusRoot(ConsensusRoot&& from) noexcept
    : ConsensusRoot() {
    *this = ::std::move(from);
  }

  inline ConsensusRoot& operator=(const ConsensusRoot& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusRoot& operator=(ConsensusRoot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusRoot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusRoot* internal_default_instance() {
    return reinterpret_cast<const ConsensusRoot*>(
               &_ConsensusRoot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConsensusRoot& a, ConsensusRoot& b) {
    a.Swap(&b);
  }
  inline void Swap(ConsensusRoot* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConsensusRoot* New() const final {
    return CreateMaybeMessage<ConsensusRoot>(nullptr);
  }

  ConsensusRoot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusRoot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusRoot& from);
  void MergeFrom(const ConsensusRoot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusRoot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "consensuspb.ConsensusRoot";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_2eproto);
    return ::descriptor_table_state_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposerFieldNumber = 2,
    kDynastyRootFieldNumber = 3,
    kTimestampFieldNumber = 1,
  };
  // bytes proposer = 2;
  void clear_proposer();
  const std::string& proposer() const;
  void set_proposer(const std::string& value);
  void set_proposer(std::string&& value);
  void set_proposer(const char* value);
  void set_proposer(const void* value, size_t size);
  std::string* mutable_proposer();
  std::string* release_proposer();
  void set_allocated_proposer(std::string* proposer);
  private:
  const std::string& _internal_proposer() const;
  void _internal_set_proposer(const std::string& value);
  std::string* _internal_mutable_proposer();
  public:

  // bytes dynasty_root = 3;
  void clear_dynasty_root();
  const std::string& dynasty_root() const;
  void set_dynasty_root(const std::string& value);
  void set_dynasty_root(std::string&& value);
  void set_dynasty_root(const char* value);
  void set_dynasty_root(const void* value, size_t size);
  std::string* mutable_dynasty_root();
  std::string* release_dynasty_root();
  void set_allocated_dynasty_root(std::string* dynasty_root);
  private:
  const std::string& _internal_dynasty_root() const;
  void _internal_set_dynasty_root(const std::string& value);
  std::string* _internal_mutable_dynasty_root();
  public:

  // int64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:consensuspb.ConsensusRoot)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proposer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dynasty_root_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConsensusRoot

// int64 timestamp = 1;
inline void ConsensusRoot::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ConsensusRoot::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ConsensusRoot::timestamp() const {
  // @@protoc_insertion_point(field_get:consensuspb.ConsensusRoot.timestamp)
  return _internal_timestamp();
}
inline void ConsensusRoot::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void ConsensusRoot::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:consensuspb.ConsensusRoot.timestamp)
}

// bytes proposer = 2;
inline void ConsensusRoot::clear_proposer() {
  proposer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusRoot::proposer() const {
  // @@protoc_insertion_point(field_get:consensuspb.ConsensusRoot.proposer)
  return _internal_proposer();
}
inline void ConsensusRoot::set_proposer(const std::string& value) {
  _internal_set_proposer(value);
  // @@protoc_insertion_point(field_set:consensuspb.ConsensusRoot.proposer)
}
inline std::string* ConsensusRoot::mutable_proposer() {
  // @@protoc_insertion_point(field_mutable:consensuspb.ConsensusRoot.proposer)
  return _internal_mutable_proposer();
}
inline const std::string& ConsensusRoot::_internal_proposer() const {
  return proposer_.GetNoArena();
}
inline void ConsensusRoot::_internal_set_proposer(const std::string& value) {
  
  proposer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConsensusRoot::set_proposer(std::string&& value) {
  
  proposer_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:consensuspb.ConsensusRoot.proposer)
}
inline void ConsensusRoot::set_proposer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proposer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:consensuspb.ConsensusRoot.proposer)
}
inline void ConsensusRoot::set_proposer(const void* value, size_t size) {
  
  proposer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:consensuspb.ConsensusRoot.proposer)
}
inline std::string* ConsensusRoot::_internal_mutable_proposer() {
  
  return proposer_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusRoot::release_proposer() {
  // @@protoc_insertion_point(field_release:consensuspb.ConsensusRoot.proposer)
  
  return proposer_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusRoot::set_allocated_proposer(std::string* proposer) {
  if (proposer != nullptr) {
    
  } else {
    
  }
  proposer_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proposer);
  // @@protoc_insertion_point(field_set_allocated:consensuspb.ConsensusRoot.proposer)
}

// bytes dynasty_root = 3;
inline void ConsensusRoot::clear_dynasty_root() {
  dynasty_root_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConsensusRoot::dynasty_root() const {
  // @@protoc_insertion_point(field_get:consensuspb.ConsensusRoot.dynasty_root)
  return _internal_dynasty_root();
}
inline void ConsensusRoot::set_dynasty_root(const std::string& value) {
  _internal_set_dynasty_root(value);
  // @@protoc_insertion_point(field_set:consensuspb.ConsensusRoot.dynasty_root)
}
inline std::string* ConsensusRoot::mutable_dynasty_root() {
  // @@protoc_insertion_point(field_mutable:consensuspb.ConsensusRoot.dynasty_root)
  return _internal_mutable_dynasty_root();
}
inline const std::string& ConsensusRoot::_internal_dynasty_root() const {
  return dynasty_root_.GetNoArena();
}
inline void ConsensusRoot::_internal_set_dynasty_root(const std::string& value) {
  
  dynasty_root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConsensusRoot::set_dynasty_root(std::string&& value) {
  
  dynasty_root_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:consensuspb.ConsensusRoot.dynasty_root)
}
inline void ConsensusRoot::set_dynasty_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dynasty_root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:consensuspb.ConsensusRoot.dynasty_root)
}
inline void ConsensusRoot::set_dynasty_root(const void* value, size_t size) {
  
  dynasty_root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:consensuspb.ConsensusRoot.dynasty_root)
}
inline std::string* ConsensusRoot::_internal_mutable_dynasty_root() {
  
  return dynasty_root_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConsensusRoot::release_dynasty_root() {
  // @@protoc_insertion_point(field_release:consensuspb.ConsensusRoot.dynasty_root)
  
  return dynasty_root_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConsensusRoot::set_allocated_dynasty_root(std::string* dynasty_root) {
  if (dynasty_root != nullptr) {
    
  } else {
    
  }
  dynasty_root_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dynasty_root);
  // @@protoc_insertion_point(field_set_allocated:consensuspb.ConsensusRoot.dynasty_root)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace consensuspb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_state_2eproto

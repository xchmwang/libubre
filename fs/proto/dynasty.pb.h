// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dynasty.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dynasty_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dynasty_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dynasty_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dynasty_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dynasty_2eproto;
namespace corepb {
class Dynasty;
class DynastyDefaultTypeInternal;
extern DynastyDefaultTypeInternal _Dynasty_default_instance_;
class DynastyCandidate;
class DynastyCandidateDefaultTypeInternal;
extern DynastyCandidateDefaultTypeInternal _DynastyCandidate_default_instance_;
class DynastyMeta;
class DynastyMetaDefaultTypeInternal;
extern DynastyMetaDefaultTypeInternal _DynastyMeta_default_instance_;
}  // namespace corepb
PROTOBUF_NAMESPACE_OPEN
template<> ::corepb::Dynasty* Arena::CreateMaybeMessage<::corepb::Dynasty>(Arena*);
template<> ::corepb::DynastyCandidate* Arena::CreateMaybeMessage<::corepb::DynastyCandidate>(Arena*);
template<> ::corepb::DynastyMeta* Arena::CreateMaybeMessage<::corepb::DynastyMeta>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace corepb {

// ===================================================================

class Dynasty :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:corepb.Dynasty) */ {
 public:
  Dynasty();
  virtual ~Dynasty();

  Dynasty(const Dynasty& from);
  Dynasty(Dynasty&& from) noexcept
    : Dynasty() {
    *this = ::std::move(from);
  }

  inline Dynasty& operator=(const Dynasty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dynasty& operator=(Dynasty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dynasty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dynasty* internal_default_instance() {
    return reinterpret_cast<const Dynasty*>(
               &_Dynasty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Dynasty& a, Dynasty& b) {
    a.Swap(&b);
  }
  inline void Swap(Dynasty* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dynasty* New() const final {
    return CreateMaybeMessage<Dynasty>(nullptr);
  }

  Dynasty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dynasty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dynasty& from);
  void MergeFrom(const Dynasty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dynasty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "corepb.Dynasty";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dynasty_2eproto);
    return ::descriptor_table_dynasty_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandidateFieldNumber = 2,
    kMetaFieldNumber = 1,
  };
  // repeated .corepb.DynastyCandidate candidate = 2;
  int candidate_size() const;
  private:
  int _internal_candidate_size() const;
  public:
  void clear_candidate();
  ::corepb::DynastyCandidate* mutable_candidate(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::corepb::DynastyCandidate >*
      mutable_candidate();
  private:
  const ::corepb::DynastyCandidate& _internal_candidate(int index) const;
  ::corepb::DynastyCandidate* _internal_add_candidate();
  public:
  const ::corepb::DynastyCandidate& candidate(int index) const;
  ::corepb::DynastyCandidate* add_candidate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::corepb::DynastyCandidate >&
      candidate() const;

  // .corepb.DynastyMeta meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::corepb::DynastyMeta& meta() const;
  ::corepb::DynastyMeta* release_meta();
  ::corepb::DynastyMeta* mutable_meta();
  void set_allocated_meta(::corepb::DynastyMeta* meta);
  private:
  const ::corepb::DynastyMeta& _internal_meta() const;
  ::corepb::DynastyMeta* _internal_mutable_meta();
  public:

  // @@protoc_insertion_point(class_scope:corepb.Dynasty)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::corepb::DynastyCandidate > candidate_;
  ::corepb::DynastyMeta* meta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dynasty_2eproto;
};
// -------------------------------------------------------------------

class DynastyMeta :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:corepb.DynastyMeta) */ {
 public:
  DynastyMeta();
  virtual ~DynastyMeta();

  DynastyMeta(const DynastyMeta& from);
  DynastyMeta(DynastyMeta&& from) noexcept
    : DynastyMeta() {
    *this = ::std::move(from);
  }

  inline DynastyMeta& operator=(const DynastyMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline DynastyMeta& operator=(DynastyMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DynastyMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DynastyMeta* internal_default_instance() {
    return reinterpret_cast<const DynastyMeta*>(
               &_DynastyMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DynastyMeta& a, DynastyMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(DynastyMeta* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DynastyMeta* New() const final {
    return CreateMaybeMessage<DynastyMeta>(nullptr);
  }

  DynastyMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DynastyMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DynastyMeta& from);
  void MergeFrom(const DynastyMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DynastyMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "corepb.DynastyMeta";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dynasty_2eproto);
    return ::descriptor_table_dynasty_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChainIdFieldNumber = 1,
  };
  // uint32 chain_id = 1;
  void clear_chain_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 chain_id() const;
  void set_chain_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chain_id() const;
  void _internal_set_chain_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:corepb.DynastyMeta)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chain_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dynasty_2eproto;
};
// -------------------------------------------------------------------

class DynastyCandidate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:corepb.DynastyCandidate) */ {
 public:
  DynastyCandidate();
  virtual ~DynastyCandidate();

  DynastyCandidate(const DynastyCandidate& from);
  DynastyCandidate(DynastyCandidate&& from) noexcept
    : DynastyCandidate() {
    *this = ::std::move(from);
  }

  inline DynastyCandidate& operator=(const DynastyCandidate& from) {
    CopyFrom(from);
    return *this;
  }
  inline DynastyCandidate& operator=(DynastyCandidate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DynastyCandidate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DynastyCandidate* internal_default_instance() {
    return reinterpret_cast<const DynastyCandidate*>(
               &_DynastyCandidate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DynastyCandidate& a, DynastyCandidate& b) {
    a.Swap(&b);
  }
  inline void Swap(DynastyCandidate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DynastyCandidate* New() const final {
    return CreateMaybeMessage<DynastyCandidate>(nullptr);
  }

  DynastyCandidate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DynastyCandidate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DynastyCandidate& from);
  void MergeFrom(const DynastyCandidate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DynastyCandidate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "corepb.DynastyCandidate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dynasty_2eproto);
    return ::descriptor_table_dynasty_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDynastyFieldNumber = 2,
    kSerialFieldNumber = 1,
  };
  // repeated string dynasty = 2;
  int dynasty_size() const;
  private:
  int _internal_dynasty_size() const;
  public:
  void clear_dynasty();
  const std::string& dynasty(int index) const;
  std::string* mutable_dynasty(int index);
  void set_dynasty(int index, const std::string& value);
  void set_dynasty(int index, std::string&& value);
  void set_dynasty(int index, const char* value);
  void set_dynasty(int index, const char* value, size_t size);
  std::string* add_dynasty();
  void add_dynasty(const std::string& value);
  void add_dynasty(std::string&& value);
  void add_dynasty(const char* value);
  void add_dynasty(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& dynasty() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_dynasty();
  private:
  const std::string& _internal_dynasty(int index) const;
  std::string* _internal_add_dynasty();
  public:

  // uint64 serial = 1;
  void clear_serial();
  ::PROTOBUF_NAMESPACE_ID::uint64 serial() const;
  void set_serial(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_serial() const;
  void _internal_set_serial(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:corepb.DynastyCandidate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> dynasty_;
  ::PROTOBUF_NAMESPACE_ID::uint64 serial_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dynasty_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Dynasty

// .corepb.DynastyMeta meta = 1;
inline bool Dynasty::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool Dynasty::has_meta() const {
  return _internal_has_meta();
}
inline void Dynasty::clear_meta() {
  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
inline const ::corepb::DynastyMeta& Dynasty::_internal_meta() const {
  const ::corepb::DynastyMeta* p = meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::corepb::DynastyMeta*>(
      &::corepb::_DynastyMeta_default_instance_);
}
inline const ::corepb::DynastyMeta& Dynasty::meta() const {
  // @@protoc_insertion_point(field_get:corepb.Dynasty.meta)
  return _internal_meta();
}
inline ::corepb::DynastyMeta* Dynasty::release_meta() {
  // @@protoc_insertion_point(field_release:corepb.Dynasty.meta)
  
  ::corepb::DynastyMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::corepb::DynastyMeta* Dynasty::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::corepb::DynastyMeta>(GetArenaNoVirtual());
    meta_ = p;
  }
  return meta_;
}
inline ::corepb::DynastyMeta* Dynasty::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:corepb.Dynasty.meta)
  return _internal_mutable_meta();
}
inline void Dynasty::set_allocated_meta(::corepb::DynastyMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete meta_;
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:corepb.Dynasty.meta)
}

// repeated .corepb.DynastyCandidate candidate = 2;
inline int Dynasty::_internal_candidate_size() const {
  return candidate_.size();
}
inline int Dynasty::candidate_size() const {
  return _internal_candidate_size();
}
inline void Dynasty::clear_candidate() {
  candidate_.Clear();
}
inline ::corepb::DynastyCandidate* Dynasty::mutable_candidate(int index) {
  // @@protoc_insertion_point(field_mutable:corepb.Dynasty.candidate)
  return candidate_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::corepb::DynastyCandidate >*
Dynasty::mutable_candidate() {
  // @@protoc_insertion_point(field_mutable_list:corepb.Dynasty.candidate)
  return &candidate_;
}
inline const ::corepb::DynastyCandidate& Dynasty::_internal_candidate(int index) const {
  return candidate_.Get(index);
}
inline const ::corepb::DynastyCandidate& Dynasty::candidate(int index) const {
  // @@protoc_insertion_point(field_get:corepb.Dynasty.candidate)
  return _internal_candidate(index);
}
inline ::corepb::DynastyCandidate* Dynasty::_internal_add_candidate() {
  return candidate_.Add();
}
inline ::corepb::DynastyCandidate* Dynasty::add_candidate() {
  // @@protoc_insertion_point(field_add:corepb.Dynasty.candidate)
  return _internal_add_candidate();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::corepb::DynastyCandidate >&
Dynasty::candidate() const {
  // @@protoc_insertion_point(field_list:corepb.Dynasty.candidate)
  return candidate_;
}

// -------------------------------------------------------------------

// DynastyMeta

// uint32 chain_id = 1;
inline void DynastyMeta::clear_chain_id() {
  chain_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DynastyMeta::_internal_chain_id() const {
  return chain_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DynastyMeta::chain_id() const {
  // @@protoc_insertion_point(field_get:corepb.DynastyMeta.chain_id)
  return _internal_chain_id();
}
inline void DynastyMeta::_internal_set_chain_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  chain_id_ = value;
}
inline void DynastyMeta::set_chain_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_chain_id(value);
  // @@protoc_insertion_point(field_set:corepb.DynastyMeta.chain_id)
}

// -------------------------------------------------------------------

// DynastyCandidate

// uint64 serial = 1;
inline void DynastyCandidate::clear_serial() {
  serial_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DynastyCandidate::_internal_serial() const {
  return serial_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DynastyCandidate::serial() const {
  // @@protoc_insertion_point(field_get:corepb.DynastyCandidate.serial)
  return _internal_serial();
}
inline void DynastyCandidate::_internal_set_serial(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  serial_ = value;
}
inline void DynastyCandidate::set_serial(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_serial(value);
  // @@protoc_insertion_point(field_set:corepb.DynastyCandidate.serial)
}

// repeated string dynasty = 2;
inline int DynastyCandidate::_internal_dynasty_size() const {
  return dynasty_.size();
}
inline int DynastyCandidate::dynasty_size() const {
  return _internal_dynasty_size();
}
inline void DynastyCandidate::clear_dynasty() {
  dynasty_.Clear();
}
inline std::string* DynastyCandidate::add_dynasty() {
  // @@protoc_insertion_point(field_add_mutable:corepb.DynastyCandidate.dynasty)
  return _internal_add_dynasty();
}
inline const std::string& DynastyCandidate::_internal_dynasty(int index) const {
  return dynasty_.Get(index);
}
inline const std::string& DynastyCandidate::dynasty(int index) const {
  // @@protoc_insertion_point(field_get:corepb.DynastyCandidate.dynasty)
  return _internal_dynasty(index);
}
inline std::string* DynastyCandidate::mutable_dynasty(int index) {
  // @@protoc_insertion_point(field_mutable:corepb.DynastyCandidate.dynasty)
  return dynasty_.Mutable(index);
}
inline void DynastyCandidate::set_dynasty(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:corepb.DynastyCandidate.dynasty)
  dynasty_.Mutable(index)->assign(value);
}
inline void DynastyCandidate::set_dynasty(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:corepb.DynastyCandidate.dynasty)
  dynasty_.Mutable(index)->assign(std::move(value));
}
inline void DynastyCandidate::set_dynasty(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dynasty_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:corepb.DynastyCandidate.dynasty)
}
inline void DynastyCandidate::set_dynasty(int index, const char* value, size_t size) {
  dynasty_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:corepb.DynastyCandidate.dynasty)
}
inline std::string* DynastyCandidate::_internal_add_dynasty() {
  return dynasty_.Add();
}
inline void DynastyCandidate::add_dynasty(const std::string& value) {
  dynasty_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:corepb.DynastyCandidate.dynasty)
}
inline void DynastyCandidate::add_dynasty(std::string&& value) {
  dynasty_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:corepb.DynastyCandidate.dynasty)
}
inline void DynastyCandidate::add_dynasty(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dynasty_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:corepb.DynastyCandidate.dynasty)
}
inline void DynastyCandidate::add_dynasty(const char* value, size_t size) {
  dynasty_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:corepb.DynastyCandidate.dynasty)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DynastyCandidate::dynasty() const {
  // @@protoc_insertion_point(field_list:corepb.DynastyCandidate.dynasty)
  return dynasty_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DynastyCandidate::mutable_dynasty() {
  // @@protoc_insertion_point(field_mutable_list:corepb.DynastyCandidate.dynasty)
  return &dynasty_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace corepb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dynasty_2eproto

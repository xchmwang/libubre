// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ir.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ir_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ir_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ir_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ir_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ir_2eproto;
namespace nbre {
class NBREIR;
class NBREIRDefaultTypeInternal;
extern NBREIRDefaultTypeInternal _NBREIR_default_instance_;
class NBREIRDepend;
class NBREIRDependDefaultTypeInternal;
extern NBREIRDependDefaultTypeInternal _NBREIRDepend_default_instance_;
}  // namespace nbre
PROTOBUF_NAMESPACE_OPEN
template<> ::nbre::NBREIR* Arena::CreateMaybeMessage<::nbre::NBREIR>(Arena*);
template<> ::nbre::NBREIRDepend* Arena::CreateMaybeMessage<::nbre::NBREIRDepend>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace nbre {

// ===================================================================

class NBREIRDepend :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nbre.NBREIRDepend) */ {
 public:
  NBREIRDepend();
  virtual ~NBREIRDepend();

  NBREIRDepend(const NBREIRDepend& from);
  NBREIRDepend(NBREIRDepend&& from) noexcept
    : NBREIRDepend() {
    *this = ::std::move(from);
  }

  inline NBREIRDepend& operator=(const NBREIRDepend& from) {
    CopyFrom(from);
    return *this;
  }
  inline NBREIRDepend& operator=(NBREIRDepend&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NBREIRDepend& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NBREIRDepend* internal_default_instance() {
    return reinterpret_cast<const NBREIRDepend*>(
               &_NBREIRDepend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NBREIRDepend& a, NBREIRDepend& b) {
    a.Swap(&b);
  }
  inline void Swap(NBREIRDepend* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NBREIRDepend* New() const final {
    return CreateMaybeMessage<NBREIRDepend>(nullptr);
  }

  NBREIRDepend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NBREIRDepend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NBREIRDepend& from);
  void MergeFrom(const NBREIRDepend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NBREIRDepend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nbre.NBREIRDepend";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ir_2eproto);
    return ::descriptor_table_ir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 version = 2;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:nbre.NBREIRDepend)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ir_2eproto;
};
// -------------------------------------------------------------------

class NBREIR :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nbre.NBREIR) */ {
 public:
  NBREIR();
  virtual ~NBREIR();

  NBREIR(const NBREIR& from);
  NBREIR(NBREIR&& from) noexcept
    : NBREIR() {
    *this = ::std::move(from);
  }

  inline NBREIR& operator=(const NBREIR& from) {
    CopyFrom(from);
    return *this;
  }
  inline NBREIR& operator=(NBREIR&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NBREIR& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NBREIR* internal_default_instance() {
    return reinterpret_cast<const NBREIR*>(
               &_NBREIR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NBREIR& a, NBREIR& b) {
    a.Swap(&b);
  }
  inline void Swap(NBREIR* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NBREIR* New() const final {
    return CreateMaybeMessage<NBREIR>(nullptr);
  }

  NBREIR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NBREIR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NBREIR& from);
  void MergeFrom(const NBREIR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NBREIR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nbre.NBREIR";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ir_2eproto);
    return ::descriptor_table_ir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDependsFieldNumber = 4,
    kNameFieldNumber = 1,
    kIrFieldNumber = 5,
    kIrTypeFieldNumber = 6,
    kVersionFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // repeated .nbre.NBREIRDepend depends = 4;
  int depends_size() const;
  private:
  int _internal_depends_size() const;
  public:
  void clear_depends();
  ::nbre::NBREIRDepend* mutable_depends(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nbre::NBREIRDepend >*
      mutable_depends();
  private:
  const ::nbre::NBREIRDepend& _internal_depends(int index) const;
  ::nbre::NBREIRDepend* _internal_add_depends();
  public:
  const ::nbre::NBREIRDepend& depends(int index) const;
  ::nbre::NBREIRDepend* add_depends();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nbre::NBREIRDepend >&
      depends() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes ir = 5;
  void clear_ir();
  const std::string& ir() const;
  void set_ir(const std::string& value);
  void set_ir(std::string&& value);
  void set_ir(const char* value);
  void set_ir(const void* value, size_t size);
  std::string* mutable_ir();
  std::string* release_ir();
  void set_allocated_ir(std::string* ir);
  private:
  const std::string& _internal_ir() const;
  void _internal_set_ir(const std::string& value);
  std::string* _internal_mutable_ir();
  public:

  // string ir_type = 6;
  void clear_ir_type();
  const std::string& ir_type() const;
  void set_ir_type(const std::string& value);
  void set_ir_type(std::string&& value);
  void set_ir_type(const char* value);
  void set_ir_type(const char* value, size_t size);
  std::string* mutable_ir_type();
  std::string* release_ir_type();
  void set_allocated_ir_type(std::string* ir_type);
  private:
  const std::string& _internal_ir_type() const;
  void _internal_set_ir_type(const std::string& value);
  std::string* _internal_mutable_ir_type();
  public:

  // uint64 version = 2;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 height = 3;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:nbre.NBREIR)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nbre::NBREIRDepend > depends_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ir_type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 version_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ir_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NBREIRDepend

// string name = 1;
inline void NBREIRDepend::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NBREIRDepend::name() const {
  // @@protoc_insertion_point(field_get:nbre.NBREIRDepend.name)
  return _internal_name();
}
inline void NBREIRDepend::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:nbre.NBREIRDepend.name)
}
inline std::string* NBREIRDepend::mutable_name() {
  // @@protoc_insertion_point(field_mutable:nbre.NBREIRDepend.name)
  return _internal_mutable_name();
}
inline const std::string& NBREIRDepend::_internal_name() const {
  return name_.GetNoArena();
}
inline void NBREIRDepend::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NBREIRDepend::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nbre.NBREIRDepend.name)
}
inline void NBREIRDepend::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nbre.NBREIRDepend.name)
}
inline void NBREIRDepend::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nbre.NBREIRDepend.name)
}
inline std::string* NBREIRDepend::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NBREIRDepend::release_name() {
  // @@protoc_insertion_point(field_release:nbre.NBREIRDepend.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NBREIRDepend::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:nbre.NBREIRDepend.name)
}

// uint64 version = 2;
inline void NBREIRDepend::clear_version() {
  version_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NBREIRDepend::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NBREIRDepend::version() const {
  // @@protoc_insertion_point(field_get:nbre.NBREIRDepend.version)
  return _internal_version();
}
inline void NBREIRDepend::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  version_ = value;
}
inline void NBREIRDepend::set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:nbre.NBREIRDepend.version)
}

// -------------------------------------------------------------------

// NBREIR

// string name = 1;
inline void NBREIR::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NBREIR::name() const {
  // @@protoc_insertion_point(field_get:nbre.NBREIR.name)
  return _internal_name();
}
inline void NBREIR::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:nbre.NBREIR.name)
}
inline std::string* NBREIR::mutable_name() {
  // @@protoc_insertion_point(field_mutable:nbre.NBREIR.name)
  return _internal_mutable_name();
}
inline const std::string& NBREIR::_internal_name() const {
  return name_.GetNoArena();
}
inline void NBREIR::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NBREIR::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nbre.NBREIR.name)
}
inline void NBREIR::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nbre.NBREIR.name)
}
inline void NBREIR::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nbre.NBREIR.name)
}
inline std::string* NBREIR::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NBREIR::release_name() {
  // @@protoc_insertion_point(field_release:nbre.NBREIR.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NBREIR::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:nbre.NBREIR.name)
}

// uint64 version = 2;
inline void NBREIR::clear_version() {
  version_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NBREIR::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NBREIR::version() const {
  // @@protoc_insertion_point(field_get:nbre.NBREIR.version)
  return _internal_version();
}
inline void NBREIR::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  version_ = value;
}
inline void NBREIR::set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:nbre.NBREIR.version)
}

// uint64 height = 3;
inline void NBREIR::clear_height() {
  height_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NBREIR::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NBREIR::height() const {
  // @@protoc_insertion_point(field_get:nbre.NBREIR.height)
  return _internal_height();
}
inline void NBREIR::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void NBREIR::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:nbre.NBREIR.height)
}

// repeated .nbre.NBREIRDepend depends = 4;
inline int NBREIR::_internal_depends_size() const {
  return depends_.size();
}
inline int NBREIR::depends_size() const {
  return _internal_depends_size();
}
inline void NBREIR::clear_depends() {
  depends_.Clear();
}
inline ::nbre::NBREIRDepend* NBREIR::mutable_depends(int index) {
  // @@protoc_insertion_point(field_mutable:nbre.NBREIR.depends)
  return depends_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nbre::NBREIRDepend >*
NBREIR::mutable_depends() {
  // @@protoc_insertion_point(field_mutable_list:nbre.NBREIR.depends)
  return &depends_;
}
inline const ::nbre::NBREIRDepend& NBREIR::_internal_depends(int index) const {
  return depends_.Get(index);
}
inline const ::nbre::NBREIRDepend& NBREIR::depends(int index) const {
  // @@protoc_insertion_point(field_get:nbre.NBREIR.depends)
  return _internal_depends(index);
}
inline ::nbre::NBREIRDepend* NBREIR::_internal_add_depends() {
  return depends_.Add();
}
inline ::nbre::NBREIRDepend* NBREIR::add_depends() {
  // @@protoc_insertion_point(field_add:nbre.NBREIR.depends)
  return _internal_add_depends();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nbre::NBREIRDepend >&
NBREIR::depends() const {
  // @@protoc_insertion_point(field_list:nbre.NBREIR.depends)
  return depends_;
}

// bytes ir = 5;
inline void NBREIR::clear_ir() {
  ir_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NBREIR::ir() const {
  // @@protoc_insertion_point(field_get:nbre.NBREIR.ir)
  return _internal_ir();
}
inline void NBREIR::set_ir(const std::string& value) {
  _internal_set_ir(value);
  // @@protoc_insertion_point(field_set:nbre.NBREIR.ir)
}
inline std::string* NBREIR::mutable_ir() {
  // @@protoc_insertion_point(field_mutable:nbre.NBREIR.ir)
  return _internal_mutable_ir();
}
inline const std::string& NBREIR::_internal_ir() const {
  return ir_.GetNoArena();
}
inline void NBREIR::_internal_set_ir(const std::string& value) {
  
  ir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NBREIR::set_ir(std::string&& value) {
  
  ir_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nbre.NBREIR.ir)
}
inline void NBREIR::set_ir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nbre.NBREIR.ir)
}
inline void NBREIR::set_ir(const void* value, size_t size) {
  
  ir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nbre.NBREIR.ir)
}
inline std::string* NBREIR::_internal_mutable_ir() {
  
  return ir_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NBREIR::release_ir() {
  // @@protoc_insertion_point(field_release:nbre.NBREIR.ir)
  
  return ir_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NBREIR::set_allocated_ir(std::string* ir) {
  if (ir != nullptr) {
    
  } else {
    
  }
  ir_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ir);
  // @@protoc_insertion_point(field_set_allocated:nbre.NBREIR.ir)
}

// string ir_type = 6;
inline void NBREIR::clear_ir_type() {
  ir_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NBREIR::ir_type() const {
  // @@protoc_insertion_point(field_get:nbre.NBREIR.ir_type)
  return _internal_ir_type();
}
inline void NBREIR::set_ir_type(const std::string& value) {
  _internal_set_ir_type(value);
  // @@protoc_insertion_point(field_set:nbre.NBREIR.ir_type)
}
inline std::string* NBREIR::mutable_ir_type() {
  // @@protoc_insertion_point(field_mutable:nbre.NBREIR.ir_type)
  return _internal_mutable_ir_type();
}
inline const std::string& NBREIR::_internal_ir_type() const {
  return ir_type_.GetNoArena();
}
inline void NBREIR::_internal_set_ir_type(const std::string& value) {
  
  ir_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NBREIR::set_ir_type(std::string&& value) {
  
  ir_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nbre.NBREIR.ir_type)
}
inline void NBREIR::set_ir_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ir_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nbre.NBREIR.ir_type)
}
inline void NBREIR::set_ir_type(const char* value, size_t size) {
  
  ir_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nbre.NBREIR.ir_type)
}
inline std::string* NBREIR::_internal_mutable_ir_type() {
  
  return ir_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NBREIR::release_ir_type() {
  // @@protoc_insertion_point(field_release:nbre.NBREIR.ir_type)
  
  return ir_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NBREIR::set_allocated_ir_type(std::string* ir_type) {
  if (ir_type != nullptr) {
    
  } else {
    
  }
  ir_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ir_type);
  // @@protoc_insertion_point(field_set_allocated:nbre.NBREIR.ir_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace nbre

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ir_2eproto

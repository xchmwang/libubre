// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: genesis.proto

#include "genesis.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_genesis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GenesisConsensus_genesis_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_genesis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenesisConsensusDpos_genesis_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_genesis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenesisMeta_genesis_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_genesis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenesisTokenDistribution_genesis_2eproto;
namespace corepb {
class GenesisDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Genesis> _instance;
} _Genesis_default_instance_;
class GenesisMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenesisMeta> _instance;
} _GenesisMeta_default_instance_;
class GenesisConsensusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenesisConsensus> _instance;
} _GenesisConsensus_default_instance_;
class GenesisConsensusDposDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenesisConsensusDpos> _instance;
} _GenesisConsensusDpos_default_instance_;
class GenesisTokenDistributionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenesisTokenDistribution> _instance;
} _GenesisTokenDistribution_default_instance_;
}  // namespace corepb
static void InitDefaultsscc_info_Genesis_genesis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::corepb::_Genesis_default_instance_;
    new (ptr) ::corepb::Genesis();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::corepb::Genesis::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Genesis_genesis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Genesis_genesis_2eproto}, {
      &scc_info_GenesisMeta_genesis_2eproto.base,
      &scc_info_GenesisConsensus_genesis_2eproto.base,
      &scc_info_GenesisTokenDistribution_genesis_2eproto.base,}};

static void InitDefaultsscc_info_GenesisConsensus_genesis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::corepb::_GenesisConsensus_default_instance_;
    new (ptr) ::corepb::GenesisConsensus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::corepb::GenesisConsensus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GenesisConsensus_genesis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GenesisConsensus_genesis_2eproto}, {
      &scc_info_GenesisConsensusDpos_genesis_2eproto.base,}};

static void InitDefaultsscc_info_GenesisConsensusDpos_genesis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::corepb::_GenesisConsensusDpos_default_instance_;
    new (ptr) ::corepb::GenesisConsensusDpos();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::corepb::GenesisConsensusDpos::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenesisConsensusDpos_genesis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GenesisConsensusDpos_genesis_2eproto}, {}};

static void InitDefaultsscc_info_GenesisMeta_genesis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::corepb::_GenesisMeta_default_instance_;
    new (ptr) ::corepb::GenesisMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::corepb::GenesisMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenesisMeta_genesis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GenesisMeta_genesis_2eproto}, {}};

static void InitDefaultsscc_info_GenesisTokenDistribution_genesis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::corepb::_GenesisTokenDistribution_default_instance_;
    new (ptr) ::corepb::GenesisTokenDistribution();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::corepb::GenesisTokenDistribution::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenesisTokenDistribution_genesis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GenesisTokenDistribution_genesis_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_genesis_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_genesis_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_genesis_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_genesis_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::corepb::Genesis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::corepb::Genesis, meta_),
  PROTOBUF_FIELD_OFFSET(::corepb::Genesis, consensus_),
  PROTOBUF_FIELD_OFFSET(::corepb::Genesis, token_distribution_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::corepb::GenesisMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::corepb::GenesisMeta, chain_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::corepb::GenesisConsensus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::corepb::GenesisConsensus, dpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::corepb::GenesisConsensusDpos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::corepb::GenesisConsensusDpos, dynasty_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::corepb::GenesisTokenDistribution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::corepb::GenesisTokenDistribution, address_),
  PROTOBUF_FIELD_OFFSET(::corepb::GenesisTokenDistribution, value_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::corepb::Genesis)},
  { 8, -1, sizeof(::corepb::GenesisMeta)},
  { 14, -1, sizeof(::corepb::GenesisConsensus)},
  { 20, -1, sizeof(::corepb::GenesisConsensusDpos)},
  { 26, -1, sizeof(::corepb::GenesisTokenDistribution)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::corepb::_Genesis_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::corepb::_GenesisMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::corepb::_GenesisConsensus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::corepb::_GenesisConsensusDpos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::corepb::_GenesisTokenDistribution_default_instance_),
};

const char descriptor_table_protodef_genesis_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rgenesis.proto\022\006corepb\"\227\001\n\007Genesis\022!\n\004m"
  "eta\030\001 \001(\0132\023.corepb.GenesisMeta\022+\n\tconsen"
  "sus\030\002 \001(\0132\030.corepb.GenesisConsensus\022<\n\022t"
  "oken_distribution\030\003 \003(\0132 .corepb.Genesis"
  "TokenDistribution\"\037\n\013GenesisMeta\022\020\n\010chai"
  "n_id\030\001 \001(\r\">\n\020GenesisConsensus\022*\n\004dpos\030\001"
  " \001(\0132\034.corepb.GenesisConsensusDpos\"\'\n\024Ge"
  "nesisConsensusDpos\022\017\n\007dynasty\030\001 \003(\t\":\n\030G"
  "enesisTokenDistribution\022\017\n\007address\030\001 \001(\t"
  "\022\r\n\005value\030\002 \001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_genesis_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_genesis_2eproto_sccs[5] = {
  &scc_info_Genesis_genesis_2eproto.base,
  &scc_info_GenesisConsensus_genesis_2eproto.base,
  &scc_info_GenesisConsensusDpos_genesis_2eproto.base,
  &scc_info_GenesisMeta_genesis_2eproto.base,
  &scc_info_GenesisTokenDistribution_genesis_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_genesis_2eproto_once;
static bool descriptor_table_genesis_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_genesis_2eproto = {
  &descriptor_table_genesis_2eproto_initialized, descriptor_table_protodef_genesis_2eproto, "genesis.proto", 383,
  &descriptor_table_genesis_2eproto_once, descriptor_table_genesis_2eproto_sccs, descriptor_table_genesis_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_genesis_2eproto::offsets,
  file_level_metadata_genesis_2eproto, 5, file_level_enum_descriptors_genesis_2eproto, file_level_service_descriptors_genesis_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_genesis_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_genesis_2eproto)), true);
namespace corepb {

// ===================================================================

void Genesis::InitAsDefaultInstance() {
  ::corepb::_Genesis_default_instance_._instance.get_mutable()->meta_ = const_cast< ::corepb::GenesisMeta*>(
      ::corepb::GenesisMeta::internal_default_instance());
  ::corepb::_Genesis_default_instance_._instance.get_mutable()->consensus_ = const_cast< ::corepb::GenesisConsensus*>(
      ::corepb::GenesisConsensus::internal_default_instance());
}
class Genesis::_Internal {
 public:
  static const ::corepb::GenesisMeta& meta(const Genesis* msg);
  static const ::corepb::GenesisConsensus& consensus(const Genesis* msg);
};

const ::corepb::GenesisMeta&
Genesis::_Internal::meta(const Genesis* msg) {
  return *msg->meta_;
}
const ::corepb::GenesisConsensus&
Genesis::_Internal::consensus(const Genesis* msg) {
  return *msg->consensus_;
}
Genesis::Genesis()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:corepb.Genesis)
}
Genesis::Genesis(const Genesis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      token_distribution_(from.token_distribution_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_meta()) {
    meta_ = new ::corepb::GenesisMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  if (from._internal_has_consensus()) {
    consensus_ = new ::corepb::GenesisConsensus(*from.consensus_);
  } else {
    consensus_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:corepb.Genesis)
}

void Genesis::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Genesis_genesis_2eproto.base);
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&consensus_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(consensus_));
}

Genesis::~Genesis() {
  // @@protoc_insertion_point(destructor:corepb.Genesis)
  SharedDtor();
}

void Genesis::SharedDtor() {
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete consensus_;
}

void Genesis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Genesis& Genesis::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Genesis_genesis_2eproto.base);
  return *internal_default_instance();
}


void Genesis::Clear() {
// @@protoc_insertion_point(message_clear_start:corepb.Genesis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_distribution_.Clear();
  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && consensus_ != nullptr) {
    delete consensus_;
  }
  consensus_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Genesis::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .corepb.GenesisMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .corepb.GenesisConsensus consensus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_consensus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .corepb.GenesisTokenDistribution token_distribution = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_token_distribution(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Genesis::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:corepb.Genesis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .corepb.GenesisMeta meta = 1;
  if (this->has_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::meta(this), target, stream);
  }

  // .corepb.GenesisConsensus consensus = 2;
  if (this->has_consensus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::consensus(this), target, stream);
  }

  // repeated .corepb.GenesisTokenDistribution token_distribution = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_token_distribution_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_token_distribution(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:corepb.Genesis)
  return target;
}

size_t Genesis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:corepb.Genesis)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .corepb.GenesisTokenDistribution token_distribution = 3;
  total_size += 1UL * this->_internal_token_distribution_size();
  for (const auto& msg : this->token_distribution_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .corepb.GenesisMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // .corepb.GenesisConsensus consensus = 2;
  if (this->has_consensus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *consensus_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Genesis::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:corepb.Genesis)
  GOOGLE_DCHECK_NE(&from, this);
  const Genesis* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Genesis>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:corepb.Genesis)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:corepb.Genesis)
    MergeFrom(*source);
  }
}

void Genesis::MergeFrom(const Genesis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:corepb.Genesis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  token_distribution_.MergeFrom(from.token_distribution_);
  if (from.has_meta()) {
    _internal_mutable_meta()->::corepb::GenesisMeta::MergeFrom(from._internal_meta());
  }
  if (from.has_consensus()) {
    _internal_mutable_consensus()->::corepb::GenesisConsensus::MergeFrom(from._internal_consensus());
  }
}

void Genesis::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:corepb.Genesis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Genesis::CopyFrom(const Genesis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:corepb.Genesis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Genesis::IsInitialized() const {
  return true;
}

void Genesis::InternalSwap(Genesis* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_distribution_.InternalSwap(&other->token_distribution_);
  swap(meta_, other->meta_);
  swap(consensus_, other->consensus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Genesis::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GenesisMeta::InitAsDefaultInstance() {
}
class GenesisMeta::_Internal {
 public:
};

GenesisMeta::GenesisMeta()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:corepb.GenesisMeta)
}
GenesisMeta::GenesisMeta(const GenesisMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chain_id_ = from.chain_id_;
  // @@protoc_insertion_point(copy_constructor:corepb.GenesisMeta)
}

void GenesisMeta::SharedCtor() {
  chain_id_ = 0u;
}

GenesisMeta::~GenesisMeta() {
  // @@protoc_insertion_point(destructor:corepb.GenesisMeta)
  SharedDtor();
}

void GenesisMeta::SharedDtor() {
}

void GenesisMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenesisMeta& GenesisMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenesisMeta_genesis_2eproto.base);
  return *internal_default_instance();
}


void GenesisMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:corepb.GenesisMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chain_id_ = 0u;
  _internal_metadata_.Clear();
}

const char* GenesisMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 chain_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chain_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenesisMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:corepb.GenesisMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 chain_id = 1;
  if (this->chain_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_chain_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:corepb.GenesisMeta)
  return target;
}

size_t GenesisMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:corepb.GenesisMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 chain_id = 1;
  if (this->chain_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chain_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenesisMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:corepb.GenesisMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const GenesisMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenesisMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:corepb.GenesisMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:corepb.GenesisMeta)
    MergeFrom(*source);
  }
}

void GenesisMeta::MergeFrom(const GenesisMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:corepb.GenesisMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chain_id() != 0) {
    _internal_set_chain_id(from._internal_chain_id());
  }
}

void GenesisMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:corepb.GenesisMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenesisMeta::CopyFrom(const GenesisMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:corepb.GenesisMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisMeta::IsInitialized() const {
  return true;
}

void GenesisMeta::InternalSwap(GenesisMeta* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(chain_id_, other->chain_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GenesisConsensus::InitAsDefaultInstance() {
  ::corepb::_GenesisConsensus_default_instance_._instance.get_mutable()->dpos_ = const_cast< ::corepb::GenesisConsensusDpos*>(
      ::corepb::GenesisConsensusDpos::internal_default_instance());
}
class GenesisConsensus::_Internal {
 public:
  static const ::corepb::GenesisConsensusDpos& dpos(const GenesisConsensus* msg);
};

const ::corepb::GenesisConsensusDpos&
GenesisConsensus::_Internal::dpos(const GenesisConsensus* msg) {
  return *msg->dpos_;
}
GenesisConsensus::GenesisConsensus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:corepb.GenesisConsensus)
}
GenesisConsensus::GenesisConsensus(const GenesisConsensus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_dpos()) {
    dpos_ = new ::corepb::GenesisConsensusDpos(*from.dpos_);
  } else {
    dpos_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:corepb.GenesisConsensus)
}

void GenesisConsensus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenesisConsensus_genesis_2eproto.base);
  dpos_ = nullptr;
}

GenesisConsensus::~GenesisConsensus() {
  // @@protoc_insertion_point(destructor:corepb.GenesisConsensus)
  SharedDtor();
}

void GenesisConsensus::SharedDtor() {
  if (this != internal_default_instance()) delete dpos_;
}

void GenesisConsensus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenesisConsensus& GenesisConsensus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenesisConsensus_genesis_2eproto.base);
  return *internal_default_instance();
}


void GenesisConsensus::Clear() {
// @@protoc_insertion_point(message_clear_start:corepb.GenesisConsensus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && dpos_ != nullptr) {
    delete dpos_;
  }
  dpos_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GenesisConsensus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .corepb.GenesisConsensusDpos dpos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dpos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenesisConsensus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:corepb.GenesisConsensus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .corepb.GenesisConsensusDpos dpos = 1;
  if (this->has_dpos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::dpos(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:corepb.GenesisConsensus)
  return target;
}

size_t GenesisConsensus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:corepb.GenesisConsensus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .corepb.GenesisConsensusDpos dpos = 1;
  if (this->has_dpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dpos_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenesisConsensus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:corepb.GenesisConsensus)
  GOOGLE_DCHECK_NE(&from, this);
  const GenesisConsensus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenesisConsensus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:corepb.GenesisConsensus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:corepb.GenesisConsensus)
    MergeFrom(*source);
  }
}

void GenesisConsensus::MergeFrom(const GenesisConsensus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:corepb.GenesisConsensus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dpos()) {
    _internal_mutable_dpos()->::corepb::GenesisConsensusDpos::MergeFrom(from._internal_dpos());
  }
}

void GenesisConsensus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:corepb.GenesisConsensus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenesisConsensus::CopyFrom(const GenesisConsensus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:corepb.GenesisConsensus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisConsensus::IsInitialized() const {
  return true;
}

void GenesisConsensus::InternalSwap(GenesisConsensus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(dpos_, other->dpos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisConsensus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GenesisConsensusDpos::InitAsDefaultInstance() {
}
class GenesisConsensusDpos::_Internal {
 public:
};

GenesisConsensusDpos::GenesisConsensusDpos()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:corepb.GenesisConsensusDpos)
}
GenesisConsensusDpos::GenesisConsensusDpos(const GenesisConsensusDpos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      dynasty_(from.dynasty_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:corepb.GenesisConsensusDpos)
}

void GenesisConsensusDpos::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenesisConsensusDpos_genesis_2eproto.base);
}

GenesisConsensusDpos::~GenesisConsensusDpos() {
  // @@protoc_insertion_point(destructor:corepb.GenesisConsensusDpos)
  SharedDtor();
}

void GenesisConsensusDpos::SharedDtor() {
}

void GenesisConsensusDpos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenesisConsensusDpos& GenesisConsensusDpos::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenesisConsensusDpos_genesis_2eproto.base);
  return *internal_default_instance();
}


void GenesisConsensusDpos::Clear() {
// @@protoc_insertion_point(message_clear_start:corepb.GenesisConsensusDpos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dynasty_.Clear();
  _internal_metadata_.Clear();
}

const char* GenesisConsensusDpos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string dynasty = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dynasty();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "corepb.GenesisConsensusDpos.dynasty"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenesisConsensusDpos::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:corepb.GenesisConsensusDpos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string dynasty = 1;
  for (int i = 0, n = this->_internal_dynasty_size(); i < n; i++) {
    const auto& s = this->_internal_dynasty(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "corepb.GenesisConsensusDpos.dynasty");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:corepb.GenesisConsensusDpos)
  return target;
}

size_t GenesisConsensusDpos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:corepb.GenesisConsensusDpos)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string dynasty = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(dynasty_.size());
  for (int i = 0, n = dynasty_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      dynasty_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenesisConsensusDpos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:corepb.GenesisConsensusDpos)
  GOOGLE_DCHECK_NE(&from, this);
  const GenesisConsensusDpos* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenesisConsensusDpos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:corepb.GenesisConsensusDpos)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:corepb.GenesisConsensusDpos)
    MergeFrom(*source);
  }
}

void GenesisConsensusDpos::MergeFrom(const GenesisConsensusDpos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:corepb.GenesisConsensusDpos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dynasty_.MergeFrom(from.dynasty_);
}

void GenesisConsensusDpos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:corepb.GenesisConsensusDpos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenesisConsensusDpos::CopyFrom(const GenesisConsensusDpos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:corepb.GenesisConsensusDpos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisConsensusDpos::IsInitialized() const {
  return true;
}

void GenesisConsensusDpos::InternalSwap(GenesisConsensusDpos* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dynasty_.InternalSwap(&other->dynasty_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisConsensusDpos::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GenesisTokenDistribution::InitAsDefaultInstance() {
}
class GenesisTokenDistribution::_Internal {
 public:
};

GenesisTokenDistribution::GenesisTokenDistribution()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:corepb.GenesisTokenDistribution)
}
GenesisTokenDistribution::GenesisTokenDistribution(const GenesisTokenDistribution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:corepb.GenesisTokenDistribution)
}

void GenesisTokenDistribution::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenesisTokenDistribution_genesis_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GenesisTokenDistribution::~GenesisTokenDistribution() {
  // @@protoc_insertion_point(destructor:corepb.GenesisTokenDistribution)
  SharedDtor();
}

void GenesisTokenDistribution::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenesisTokenDistribution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenesisTokenDistribution& GenesisTokenDistribution::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenesisTokenDistribution_genesis_2eproto.base);
  return *internal_default_instance();
}


void GenesisTokenDistribution::Clear() {
// @@protoc_insertion_point(message_clear_start:corepb.GenesisTokenDistribution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GenesisTokenDistribution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "corepb.GenesisTokenDistribution.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "corepb.GenesisTokenDistribution.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenesisTokenDistribution::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:corepb.GenesisTokenDistribution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "corepb.GenesisTokenDistribution.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "corepb.GenesisTokenDistribution.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:corepb.GenesisTokenDistribution)
  return target;
}

size_t GenesisTokenDistribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:corepb.GenesisTokenDistribution)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenesisTokenDistribution::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:corepb.GenesisTokenDistribution)
  GOOGLE_DCHECK_NE(&from, this);
  const GenesisTokenDistribution* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenesisTokenDistribution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:corepb.GenesisTokenDistribution)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:corepb.GenesisTokenDistribution)
    MergeFrom(*source);
  }
}

void GenesisTokenDistribution::MergeFrom(const GenesisTokenDistribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:corepb.GenesisTokenDistribution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void GenesisTokenDistribution::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:corepb.GenesisTokenDistribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenesisTokenDistribution::CopyFrom(const GenesisTokenDistribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:corepb.GenesisTokenDistribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisTokenDistribution::IsInitialized() const {
  return true;
}

void GenesisTokenDistribution::InternalSwap(GenesisTokenDistribution* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisTokenDistribution::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace corepb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::corepb::Genesis* Arena::CreateMaybeMessage< ::corepb::Genesis >(Arena* arena) {
  return Arena::CreateInternal< ::corepb::Genesis >(arena);
}
template<> PROTOBUF_NOINLINE ::corepb::GenesisMeta* Arena::CreateMaybeMessage< ::corepb::GenesisMeta >(Arena* arena) {
  return Arena::CreateInternal< ::corepb::GenesisMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::corepb::GenesisConsensus* Arena::CreateMaybeMessage< ::corepb::GenesisConsensus >(Arena* arena) {
  return Arena::CreateInternal< ::corepb::GenesisConsensus >(arena);
}
template<> PROTOBUF_NOINLINE ::corepb::GenesisConsensusDpos* Arena::CreateMaybeMessage< ::corepb::GenesisConsensusDpos >(Arena* arena) {
  return Arena::CreateInternal< ::corepb::GenesisConsensusDpos >(arena);
}
template<> PROTOBUF_NOINLINE ::corepb::GenesisTokenDistribution* Arena::CreateMaybeMessage< ::corepb::GenesisTokenDistribution >(Arena* arena) {
  return Arena::CreateInternal< ::corepb::GenesisTokenDistribution >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
